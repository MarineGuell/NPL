"""
Interface Utilisateur Streamlit - Chatbot Kaeru

Interface graphique du chatbot Kaeru d√©velopp√©e avec Streamlit.
Personnalit√© : Grenouille japonaise qui ponctue ses phrases par "kero".

5 Fonctions Principales Disponibles :
1. Classification (Machine Learning) : TF-IDF + Naive Bayes optimis√©
2. Classification (Deep Learning) : LSTM bidirectionnel avec BatchNormalization  
3. Summarization (Machine Learning) : R√©sum√© extractif par similarit√© cosinus
4. Summarization (Deep Learning) : R√©sum√© extractif par autoencodeur
5. Wikipedia Search : Recherche intelligente avec gestion d'ambigu√Øt√©

Fonctionnalit√©s de l'Interface :
- Conversation persistante avec historique des messages
- S√©lection de fonction via sidebar radio buttons
- Gestion intelligente de l'ambigu√Øt√© Wikipedia (boutons interactifs)
- Messages personnalis√©s selon le niveau de confiance des mod√®les
- Actions descriptives de la grenouille (*hops excitedly*, *tilts head*, etc.)
- Chargement automatique des mod√®les via l'orchestrateur

Pipeline Utilisateur :
1. S√©lection de la fonction dans la sidebar
2. Saisie du texte dans le chat input
3. Pr√©traitement automatique par l'orchestrateur
4. Pr√©diction avec le mod√®le appropri√©
5. Affichage de la r√©ponse format√©e avec personnalit√©

Tous les textes passent automatiquement par le pipeline de pr√©traitement
et de transformation num√©rique avant d'√™tre trait√©s par les mod√®les.
"""

import streamlit as st
from chatbot import ChatbotOrchestrator
from utils import search_wikipedia_smart, DataLoader
import os

# Fonction utilitaire pour lister les datasets disponibles
def list_datasets():
    data_dir = os.path.join(os.path.dirname(__file__), "data")
    if not os.path.exists(data_dir):
        data_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../data"))
    return [f for f in os.listdir(data_dir) if f.endswith('.csv')]

# Configuration de la page Streamlit
st.set_page_config(
    page_title="Kaeru Chatbot",
    page_icon="üê∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Chargement du CSS (si le fichier existe)
def load_css():
    css_file = os.path.join(os.path.dirname(__file__), "static", "style.css")
    if os.path.exists(css_file):
        with open(css_file) as f:
            st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

load_css()

# Initialisation de l'orchestrateur en session
@st.cache_resource
def get_orchestrator():
    return ChatbotOrchestrator()

orchestrator = get_orchestrator()

def main():
    st.title("üê∏ Kaeru Chatbot")
    
    # === GESTION DE L'√âTAT DE L'APPLICATION ===
    # Stockage de l'historique des messages pour maintenir la conversation
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Stockage des suggestions Wikipedia en cas d'ambigu√Øt√©
    # - Cette variable permet de "m√©moriser" les options propos√©es
    # - Elle persiste entre les interactions jusqu'√† ce que l'utilisateur fasse un choix
    if "wiki_suggestions" not in st.session_state:
        st.session_state.wiki_suggestions = None

    # === CONFIGURATION DE LA BARRE LAT√âRALE ===
    # Interface pour s√©lectionner la fonctionnalit√© souhait√©e
    with st.sidebar:
        st.markdown("### ‚öôÔ∏è Functions")
        st.markdown("---")
        # S√©lection de la fonction parmi les 5 options disponibles
        task = st.radio(
            "What would you like to do, kero? üê∏",
            [
                "Classification (Machine Learning)",
                "Classification (Deep Learning)",
                "Summarization (Machine Learning)",
                "Summarization (Deep Learning)",
                "Wikipedia Search"
            ]
        )

    # === AFFICHAGE DE L'HISTORIQUE DE CONVERSATION ===
    # Restitution de tous les messages pr√©c√©dents pour maintenir le contexte
    for message in st.session_state.messages:
        with st.chat_message(message["role"], avatar=message.get("avatar")):
            st.markdown(message["content"])
    
    # === GESTION DES SUGGESTIONS WIKIPEDIA EN CAS D'AMBIGU√èT√â ===
    # Cette section s'affiche uniquement quand il y a des suggestions en attente
    if st.session_state.wiki_suggestions:
        st.markdown("### ü§î Which Wikipedia page would you like to explore, kero? üê∏")
        
        # === AFFICHAGE ORGANIS√â DES SUGGESTIONS ===
        # - Groupement par mot-cl√© pour une organisation logique
        # - Chaque mot-cl√© peut avoir plusieurs pages Wikipedia associ√©es
        for keyword, pages in st.session_state.wiki_suggestions.items():
            st.markdown(f"**For '{keyword}':**")
            
            # === CR√âATION DE BOUTONS INTERACTIFS ===
            # - Un bouton pour chaque page Wikipedia trouv√©e
            # - Cl√©s uniques pour √©viter les conflits d'interface
            for i, page in enumerate(pages):
                if st.button(f"üìñ {page}", key=f"wiki_{keyword}_{i}"):
                    # === TRAITEMENT DU CHOIX UTILISATEUR ===
                    # R√©cup√©ration du r√©sum√© de la page s√©lectionn√©e
                    try:
                        import wikipedia
                        wikipedia.set_lang("en")
                        summary = wikipedia.summary(page, sentences=3)
                        
                        # === CR√âATION DE LA R√âPONSE PERSONNALIS√âE ===
                        # - Message de la grenouille avec action appropri√©e
                        # - Affichage du r√©sum√© Wikipedia format√©
                        response = f"*hops to the knowledge pond* üê∏ Here's what I found about **{page}**, kero:\n\n{summary}"
                        
                        # === MISE √Ä JOUR DE L'HISTORIQUE ===
                        # - Ajout de la r√©ponse √† l'historique de conversation
                        # - R√©initialisation des suggestions (fin de l'ambigu√Øt√©)
                        # - Rafra√Æchissement de l'interface
                        st.session_state.messages.append({"role": "assistant", "content": response, "avatar": "üê∏"})
                        st.session_state.wiki_suggestions = None
                        st.rerun()
                    except Exception as e:
                        st.error(f"Error accessing Wikipedia: {str(e)}")
        
        # === BOUTON D'ANNULATION ===
        # - Permet √† l'utilisateur d'annuler la recherche
        # - Nettoie l'√©tat et permet une nouvelle interaction
        if st.button("‚ùå Cancel", key="cancel_wiki"):
            st.session_state.wiki_suggestions = None
            st.rerun()
            
    # === ZONE DE SAISIE ET TRAITEMENT DES REQU√äTES ===
    # Cette section s'affiche quand il n'y a pas de suggestions en attente
    elif prompt := st.chat_input("Drop your text here, kero..."):
        # === AJOUT DU MESSAGE UTILISATEUR √Ä L'HISTORIQUE ===
        # - Enregistrement du message pour maintenir la conversation
        # - Affichage imm√©diat dans l'interface
        st.session_state.messages.append({"role": "user", "content": prompt, "avatar": "üå∏"})
        with st.chat_message("user", avatar="ü¶ü"):
            st.markdown(prompt)
        
        # === TRAITEMENT DE LA DEMANDE SELON LA FONCTION S√âLECTIONN√âE ===
        # Traiter la demande et afficher la r√©ponse de l'assistant
        with st.chat_message("assistant", avatar="üê∏"):
            with st.spinner("I'm thinking, kero..."):
                response = ""
                
                # === ROUTAGE VERS LA FONCTIONNALIT√â APPROPRI√âE ===
                if task == "Classification (Machine Learning)":
                    response = orchestrator.classify(prompt, model_type='ml')
                elif task == "Classification (Deep Learning)":
                    response = orchestrator.classify(prompt, model_type='dl')
                elif task == "Summarization (Machine Learning)":
                    response = orchestrator.summarize(prompt, model_type='ml')
                elif task == "Summarization (Deep Learning)":
                    response = orchestrator.summarize(prompt, model_type='dl')
                elif task == "Wikipedia Search":
                    # === RECHERCHE WIKIPEDIA INTELLIGENTE ===
                    # Utilisation de la fonction search_wikipedia_smart pour analyse intelligente
                    result = search_wikipedia_smart(prompt)
                    
                    # === GESTION DES DIFF√âRENTS CAS DE R√âPONSE ===
                    if result['status'] == 'success':
                        # CAS A: Succ√®s direct - une seule page trouv√©e
                        # - Affichage imm√©diat du r√©sum√© Wikipedia
                        # - Message personnalis√© de la grenouille
                        response = f"*dives into the knowledge pond* üê∏ Here's what I found about **{result['page']}**, kero:\n\n{result['summary']}"
                    elif result['status'] == 'ambiguous':
                        # CAS B: Ambigu√Øt√© - plusieurs pages disponibles
                        # - Stockage des suggestions pour affichage avec boutons
                        # - Message demandant √† l'utilisateur de choisir
                        st.session_state.wiki_suggestions = result['suggestions']
                        response = f"*tilts head thoughtfully* üê∏ I found several Wikipedia pages that might interest you! Please choose one below, kero!"
                    else:  # error
                        # CAS C: Erreur - aucun r√©sultat trouv√©
                        # - Affichage du message d'erreur personnalis√©
                        response = result['message']
                
                # === AFFICHAGE ET ENREGISTREMENT DE LA R√âPONSE ===
                # - Affichage de la r√©ponse dans l'interface
                # - Ajout √† l'historique de conversation pour persistance
                if response:
                    st.markdown(response)
                    st.session_state.messages.append({"role": "assistant", "content": response, "avatar": "üê∏"})

if __name__ == "__main__":
    main()



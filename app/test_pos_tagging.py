"""
Script de test pour le POS-tagging avanc√©.
Montre les am√©liorations apport√©es par le POS-tagging dans la lemmatisation.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils import TextPreprocessor

def test_pos_tagging():
    """Test du POS-tagging et de la lemmatisation am√©lior√©e."""
    
    print("üß™ TEST DU POS-TAGGING AVANC√â")
    print("="*50)
    
    # Initialisation du pr√©traiteur
    preprocessor = TextPreprocessor()
    
    # Textes de test
    test_texts = [
        "The running man is better than the walking woman.",
        "Scientists are studying the effects of climate change.",
        "The beautiful flowers are blooming in the garden.",
        "Machine learning algorithms process data efficiently."
    ]
    
    print("\nüìù TEXTES DE TEST :")
    for i, text in enumerate(test_texts, 1):
        print(f"{i}. {text}")
    
    print("\nüîç ANALYSE D√âTAILL√âE :")
    print("="*50)
    
    for i, text in enumerate(test_texts, 1):
        print(f"\n--- TEXTE {i} ---")
        print(f"Original: {text}")
        
        # Version avec POS-tagging
        cleaned_text, pos_info = preprocessor.clean_with_pos_info(text)
        print(f"Nettoy√©: {cleaned_text}")
        
        print("\nPOS-tagging d√©taill√©:")
        print("Mot ‚Üí Tag NLTK ‚Üí Tag WordNet ‚Üí Lemmatis√©")
        print("-" * 50)
        
        for word, nltk_tag, wordnet_tag in pos_info:
            print(f"{word:15} ‚Üí {nltk_tag:8} ‚Üí {wordnet_tag:8}")
    
    print("\nüìä STATISTIQUES POS :")
    print("="*50)
    
    # Calcul des statistiques POS
    pos_stats = preprocessor.get_pos_statistics(test_texts)
    
    print("R√©partition des parties du discours :")
    for tag, stats in pos_stats.items():
        print(f"{tag:8}: {stats['count']:3} mots ({stats['percentage']:5.1f}%)")
    
    print("\nüéØ COMPARAISON LEMMATISATION :")
    print("="*50)
    
    # Exemples de comparaison
    comparison_words = [
        ("running", "VBG"),  # Verbe au participe pr√©sent
        ("better", "JJR"),   # Adjectif comparatif
        ("studying", "VBG"), # Verbe au participe pr√©sent
        ("beautiful", "JJ"), # Adjectif
        ("efficiently", "RB") # Adverbe
    ]
    
    print("Mot ‚Üí POS ‚Üí Lemmatisation avec POS ‚Üí Lemmatisation sans POS")
    print("-" * 70)
    
    for word, pos_tag in comparison_words:
        # Avec POS-tagging
        wordnet_pos = preprocessor.get_wordnet_pos(pos_tag)
        lemmatized_with_pos = preprocessor.lemmatizer.lemmatize(word, pos=wordnet_pos)
        
        # Sans POS-tagging (suppose verbe)
        lemmatized_without_pos = preprocessor.lemmatizer.lemmatize(word, pos="v")
        
        print(f"{word:12} ‚Üí {pos_tag:4} ‚Üí {lemmatized_with_pos:15} ‚Üí {lemmatized_without_pos}")
    
    print("\n‚úÖ AVANTAGES DU POS-TAGGING :")
    print("="*50)
    print("‚Ä¢ Lemmatisation plus pr√©cise (better ‚Üí good, pas better)")
    print("‚Ä¢ Distinction entre verbes et adjectifs")
    print("‚Ä¢ Meilleure qualit√© du pr√©traitement")
    print("‚Ä¢ Possibilit√© de filtrer par types de mots")
    print("‚Ä¢ Am√©lioration des performances des mod√®les")

def test_pipeline_complet():
    """Test du pipeline complet avec POS-tagging."""
    
    print("\nüöÄ TEST DU PIPELINE COMPLET")
    print("="*50)
    
    preprocessor = TextPreprocessor()
    
    # Texte complexe
    complex_text = """
    The machine learning algorithms are efficiently processing large datasets 
    while scientists are studying the effects of climate change. The beautiful 
    results show significant improvements in accuracy and performance.
    """
    
    print(f"Texte original:\n{complex_text}")
    
    # Pipeline complet
    cleaned_text = preprocessor.clean(complex_text)
    print(f"\nTexte apr√®s pr√©traitement complet:\n{cleaned_text}")
    
    # Version avec informations POS
    cleaned_with_pos, pos_info = preprocessor.clean_with_pos_info(complex_text)
    
    print(f"\nAnalyse POS d√©taill√©e:")
    print("Mot ‚Üí POS ‚Üí Lemmatis√©")
    print("-" * 30)
    
    for word, nltk_tag, wordnet_tag in pos_info[:15]:  # Afficher les 15 premiers
        print(f"{word:15} ‚Üí {nltk_tag:4} ‚Üí {wordnet_tag}")

if __name__ == "__main__":
    test_pos_tagging()
    test_pipeline_complet()
    
    print("\nüéâ TEST TERMIN√â !")
    print("Le POS-tagging est maintenant int√©gr√© au pipeline de pr√©traitement.") 
"""
Script de nettoyage des mod√®les - Supprime les anciens fichiers et v√©rifie les nouveaux chemins.

Ce script :
1. Supprime les anciens fichiers de mod√®les du dossier app/
2. V√©rifie que les nouveaux fichiers existent dans models/
3. Teste le chargement des mod√®les depuis les nouveaux chemins
"""

import os
import shutil
from pathlib import Path

def cleanup_old_models():
    """
    Supprime les anciens fichiers de mod√®les du dossier app/
    """
    print("üßπ Nettoyage des anciens fichiers de mod√®les...")
    
    # Fichiers √† supprimer du dossier app/
    files_to_remove = [
        "app/model_ml.joblib",
        "app/model_dl.h5", 
        "app/model.joblib",
        "app/vectorizer.joblib",
        "app/autoencoder_summarizer.h5"
    ]
    
    for file_path in files_to_remove:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                print(f"‚úÖ Supprim√© : {file_path}")
            except Exception as e:
                print(f"‚ùå Erreur lors de la suppression de {file_path}: {e}")
        else:
            print(f"‚ÑπÔ∏è Fichier non trouv√© : {file_path}")

def verify_new_models():
    """
    V√©rifie que les nouveaux fichiers existent dans models/
    """
    print("\nüîç V√©rification des nouveaux fichiers de mod√®les...")
    
    # Fichiers attendus dans models/
    expected_files = [
        "models/ml_model.joblib",
        "models/dl_model.h5",
        "models/vectorizer.joblib",
        "models/tokenizer.pkl",
        "models/encoder.pkl"
    ]
    
    all_exist = True
    for file_path in expected_files:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f"‚úÖ {file_path} ({size:,} bytes)")
        else:
            print(f"‚ùå Fichier manquant : {file_path}")
            all_exist = False
    
    return all_exist

def test_model_loading():
    """
    Teste le chargement des mod√®les depuis les nouveaux chemins
    """
    print("\nüß™ Test de chargement des mod√®les...")
    
    try:
        # Test du mod√®le ML
        import joblib
        ml_model = joblib.load("models/ml_model.joblib")
        print("‚úÖ Mod√®le ML charg√© avec succ√®s")
        
        # Test du mod√®le DL
        from tensorflow.keras.models import load_model
        dl_model = load_model("models/dl_model.h5")
        print("‚úÖ Mod√®le DL charg√© avec succ√®s")
        
        # Test du vectorizer
        vectorizer = joblib.load("models/vectorizer.joblib")
        print("‚úÖ Vectorizer charg√© avec succ√®s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de chargement : {e}")
        return False

def main():
    """
    Fonction principale de nettoyage
    """
    print("üöÄ D√©but du nettoyage des mod√®les...")
    
    # 1. Nettoyage des anciens fichiers
    cleanup_old_models()
    
    # 2. V√©rification des nouveaux fichiers
    models_exist = verify_new_models()
    
    # 3. Test de chargement
    if models_exist:
        loading_ok = test_model_loading()
        if loading_ok:
            print("\nüéâ Nettoyage termin√© avec succ√®s !")
            print("üìÅ Tous les mod√®les sont maintenant dans le dossier models/")
            print("üîß Les chemins dans le code ont √©t√© corrig√©s")
        else:
            print("\n‚ö†Ô∏è Probl√®me lors du test de chargement")
    else:
        print("\n‚ö†Ô∏è Certains fichiers de mod√®les sont manquants")

if __name__ == "__main__":
    main() 